// @formatter:off
////////////////////////////////////////////////////////////////////////////
//                         Kellen Siczka - 2082880                        //
//                        DePaul University - 24/25                       //
//              SE350 - Object-Oriented Software Development              //
//                ksiczka@depaul.edu | edu@kellensiczka.com               //
//         Eclipse Adoptium JRE 21.0.5.11 - Win11/WSL2 - MS VSCode        //
//           Completed by Kellen Siczka unless otherwise noted            //
//        Note: Docstrings and explanations may be generated by AI        //
////////////////////////////////////////////////////////////////////////////
//                         Week 7 - Spring Quarter                        //
//                          Lab 8 - Due 05-12-2025                        //
//          File Info: #1/3 | CharacterTest.java | JUnit Test Case        //
////////////////////////////////////////////////////////////////////////////
// @formatter:on

package dpu.se350.assignment2;

import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;

/**
 * Unit tests for the Character class and its subclasses.
 */
public class CharacterTest {
    private Character wizard;
    private Character warrior;
    private Item axe;
    private Item shield;

    @Before
    public void setup() {
        wizard = new Wizard("Gandalf");
        warrior = new Warrior("Aragorn");
        axe = new Axe();
        shield = new Shield();
    }

    @Test
    public void testCharacterCreation() {
        assertEquals("Gandalf", wizard.getName());
        assertEquals(1, wizard.getBaseStrength());
        assertEquals(4, wizard.getBaseCraft());
        assertEquals(10, wizard.getHealth());

        assertEquals("Aragorn", warrior.getName());
        assertEquals(4, warrior.getBaseStrength());
        assertEquals(1, warrior.getBaseCraft());
        assertEquals(15, warrior.getHealth());
    }

    @Test
    public void testEquipItems() {
        // Add items to inventory
        wizard.addItem(axe);
        wizard.addItem(shield);

        // Test that they're in inventory
        assertEquals(2, wizard.getInventory().size());
        assertTrue(wizard.getInventory().contains(axe));
        assertTrue(wizard.getInventory().contains(shield));

        // Test equipping in left hand
        assertTrue(wizard.equipItem(axe, true));
        assertEquals(axe, wizard.getLeftHand());

        // Test equipping in right hand
        assertTrue(wizard.equipItem(shield, false));
        assertEquals(shield, wizard.getRightHand());

        // Test strength and craft bonuses are applied
        assertEquals(1 + 2 + 1, wizard.getStrength()); // Base + axe bonus + shield bonus
        assertEquals(4 + 1, wizard.getCraft()); // Base + shield bonus
    }

    @Test
    public void testTakeDamage() {
        // Initial health
        assertEquals(10, wizard.getHealth());

        // Take some damage
        wizard.takeDamage(3);
        assertEquals(7, wizard.getHealth());
        assertFalse(wizard.isDefeated());

        // Take more damage
        wizard.takeDamage(7);
        assertEquals(0, wizard.getHealth());
        assertTrue(wizard.isDefeated());

        // Ensure health doesn't go below 0
        wizard.takeDamage(5);
        assertEquals(0, wizard.getHealth());
    }

    @Test
    public void testEquipNonExistentItem() {
        // Try to equip item not in inventory
        Item wandNotInInventory = new Shield();
        assertFalse(wizard.equipItem(wandNotInInventory, true));
        assertNull(wizard.getLeftHand());
    }

    @Test
    public void testToString() {
        String wizardString = wizard.toString();
        assertTrue(wizardString.contains("Gandalf"));
        assertTrue(wizardString.contains("Strength: 1"));
        assertTrue(wizardString.contains("Craft: 4"));
        assertTrue(wizardString.contains("Health: 10"));
    }
}
