// @formatter:off
////////////////////////////////////////////////////////////////////////////
//                         Kellen Siczka - 2082880                        //
//                        DePaul University - 24/25                       //
//              SE350 - Object-Oriented Software Development              //
//                ksiczka@depaul.edu | edu@kellensiczka.com               //
//         Eclipse Adoptium JRE 21.0.5.11 - Win11/WSL2 - MS VSCode        //
//           Completed by Kellen Siczka unless otherwise noted            //
//        Note: Docstrings and explanations may be generated by AI        //
////////////////////////////////////////////////////////////////////////////
//                         Week 7 - Spring Quarter                        //
//                          Lab 8 - Due 05-12-2025                        //
//           File Info: #2/3 | MonsterTest.java | JUnit Test Case         //
////////////////////////////////////////////////////////////////////////////
// @formatter:on

package dpu.se350.assignment2;

import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;

/**
 * Unit tests for the Monster class.
 */
public class MonsterTest {
    private Monster strengthMonster;
    private Monster craftMonster;

    @Before
    public void setup() {
        strengthMonster = new Monster("Goblin", 2, 0, 5);
        craftMonster = new Monster("Wizard", 0, 3, 4);
    }

    @Test
    public void testMonsterCreation() {
        assertEquals("Goblin", strengthMonster.getName());
        assertEquals(2, strengthMonster.getStrength());
        assertEquals(0, strengthMonster.getCraft());
        assertEquals(5, strengthMonster.getHealth());

        assertEquals("Wizard", craftMonster.getName());
        assertEquals(0, craftMonster.getStrength());
        assertEquals(3, craftMonster.getCraft());
        assertEquals(4, craftMonster.getHealth());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testInvalidMonsterCreation() {
        // Cannot have both strength and craft
        new Monster("Invalid", 1, 1, 5);
    }

    @Test
    public void testTakeDamage() {
        // Initial health
        assertEquals(5, strengthMonster.getHealth());

        // Take some damage
        strengthMonster.takeDamage(2);
        assertEquals(3, strengthMonster.getHealth());
        assertFalse(strengthMonster.isDefeated());

        // Take more damage
        strengthMonster.takeDamage(3);
        assertEquals(0, strengthMonster.getHealth());
        assertTrue(strengthMonster.isDefeated());

        // Ensure health doesn't go below 0
        strengthMonster.takeDamage(5);
        assertEquals(0, strengthMonster.getHealth());
    }

    @Test
    public void testToString() {
        String monsterString = strengthMonster.toString();
        assertTrue(monsterString.contains("Goblin"));
        assertTrue(monsterString.contains("Strength: 2"));
        assertTrue(monsterString.contains("Health: 5"));

        String wizardString = craftMonster.toString();
        assertTrue(wizardString.contains("Wizard"));
        assertTrue(wizardString.contains("Craft: 3"));
        assertTrue(wizardString.contains("Health: 4"));
    }
}
