// @formatter:off
////////////////////////////////////////////////////////////////////////////
//                         Kellen Siczka - 2082880                        //
//                        DePaul University - 24/25                       //
//              SE350 - Object-Oriented Software Development              //
//                ksiczka@depaul.edu | edu@kellensiczka.com               //
//         Eclipse Adoptium JRE 21.0.5.11 - Win11/WSL2 - MS VSCode        //
//           Completed by Kellen Siczka unless otherwise noted            //
//        Note: Docstrings and explanations may be generated by AI        //
////////////////////////////////////////////////////////////////////////////
//                         Week 7 - Spring Quarter                        //
//                          Lab 8 - Due 05-12-2025                        //
//            File Info: #7/17 | Character.java | Java Class              //
////////////////////////////////////////////////////////////////////////////
// @formatter:on

package dpu.se350.assignment2;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents a character in the game that can carry items and engage in combat.
 */
public abstract class Character {
    private String name;
    private int strength;
    private int craft;
    private int health;
    private List<Item> inventory;
    private Item leftHand;
    private Item rightHand;

    /**
     * Creates a new character with the specified attributes.
     *
     * @param name The character's name
     * @param strength The character's base strength
     * @param craft The character's base craft skill
     * @param health The character's initial health
     */
    public Character(String name, int strength, int craft, int health) {
        this.name = name;
        this.strength = strength;
        this.craft = craft;
        this.health = health;
        this.inventory = new ArrayList<>();
    }

    /**
     * Gets the character's name.
     *
     * @return The character's name
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the character's base strength.
     *
     * @return The character's base strength
     */
    public int getBaseStrength() {
        return strength;
    }

    /**
     * Gets the character's base craft skill.
     *
     * @return The character's base craft skill
     */
    public int getBaseCraft() {
        return craft;
    }

    /**
     * Gets the character's total strength, including bonuses from equipped items.
     *
     * @return The character's total strength
     */
    public int getStrength() {
        int totalStrength = strength;

        if (leftHand != null) {
            totalStrength += leftHand.getStrengthBonus();
        }

        if (rightHand != null) {
            totalStrength += rightHand.getStrengthBonus();
        }

        return totalStrength;
    }

    /**
     * Gets the character's total craft skill, including bonuses from equipped items.
     *
     * @return The character's total craft skill
     */
    public int getCraft() {
        int totalCraft = craft;

        if (leftHand != null) {
            totalCraft += leftHand.getCraftBonus();
        }

        if (rightHand != null) {
            totalCraft += rightHand.getCraftBonus();
        }

        return totalCraft;
    }

    /**
     * Gets the character's current health.
     *
     * @return The character's current health
     */
    public int getHealth() {
        return health;
    }

    /**
     * Gets the character's inventory.
     *
     * @return The list of items in the character's inventory
     */
    public List<Item> getInventory() {
        return new ArrayList<>(inventory);
    }

    /**
     * Gets the item held in the character's left hand.
     *
     * @return The item in the left hand, or null if empty
     */
    public Item getLeftHand() {
        return leftHand;
    }

    /**
     * Gets the item held in the character's right hand.
     *
     * @return The item in the right hand, or null if empty
     */
    public Item getRightHand() {
        return rightHand;
    }

    /**
     * Adds an item to the character's inventory.
     *
     * @param item The item to add
     */
    public void addItem(Item item) {
        inventory.add(item);
    }

    /**
     * Equips an item from the inventory to the specified hand.
     *
     * @param item The item to equip
     * @param isLeftHand true to equip in the left hand, false for the right hand
     * @return true if the item was equipped successfully, false otherwise
     */
    public boolean equipItem(Item item, boolean isLeftHand) {
        if (!inventory.contains(item)) {
            return false;
        }

        if (isLeftHand) {
            leftHand = item;
        } else {
            rightHand = item;
        }

        return true;
    }

    /**
     * Decreases the character's health by the specified amount.
     *
     * @param damage The amount of damage to apply
     */
    public void takeDamage(int damage) {
        health = Math.max(0, health - damage);
    }

    /**
     * Checks if the character is defeated (health is 0).
     *
     * @return true if the character is defeated, false otherwise
     */
    public boolean isDefeated() {
        return health <= 0;
    }

    /**
     * Returns a string representation of this character.
     *
     * @return A string representation of this character
     */
    @Override
    public String toString() {
        return name + " (Strength: " + getStrength() + ", Craft: " + getCraft() + ", Health: "
                + health + ")";
    }
}
