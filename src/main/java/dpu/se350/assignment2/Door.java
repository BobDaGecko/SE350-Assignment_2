// @formatter:off
////////////////////////////////////////////////////////////////////////////
//                         Kellen Siczka - 2082880                        //
//                        DePaul University - 24/25                       //
//              SE350 - Object-Oriented Software Development              //
//                ksiczka@depaul.edu | edu@kellensiczka.com               //
//         Eclipse Adoptium JRE 21.0.5.11 - Win11/WSL2 - MS VSCode        //
//           Completed by Kellen Siczka unless otherwise noted            //
//        Note: Docstrings and explanations may be generated by AI        //
////////////////////////////////////////////////////////////////////////////
//                         Week 7 - Spring Quarter                        //
//                          Lab 8 - Due 05-12-2025                        //
//               File Info: #11/17 | Door.java | Java Class               //
////////////////////////////////////////////////////////////////////////////
// @formatter:on

package dpu.se350.assignment2;

/**
 * Represents a door connecting two chambers in the dungeon. A door may be guarded by a monster.
 */
public class Door {
    private Chamber chamber1;
    private Chamber chamber2;
    private Monster monster;

    /**
     * Creates a new door connecting two chambers.
     *
     * @param chamber1 The first chamber
     * @param chamber2 The second chamber
     * @param monster The monster guarding the door (can be null)
     */
    private Door(Chamber chamber1, Chamber chamber2, Monster monster) {
        this.chamber1 = chamber1;
        this.chamber2 = chamber2;
        this.monster = monster;

        // Add this door to both chambers
        chamber1.addDoor(this);
        chamber2.addDoor(this);
    }

    /**
     * Creates a new door connecting two chambers with no monster.
     *
     * @param chamber1 The first chamber
     * @param chamber2 The second chamber
     * @return The newly created door
     */
    public static Door connect(Chamber chamber1, Chamber chamber2) {
        return new Door(chamber1, chamber2, null);
    }

    /**
     * Creates a new door connecting two chambers with a monster.
     *
     * @param chamber1 The first chamber
     * @param chamber2 The second chamber
     * @param monster The monster guarding the door
     * @return The newly created door
     */
    public static Door connect(Chamber chamber1, Chamber chamber2, Monster monster) {
        return new Door(chamber1, chamber2, monster);
    }

    /**
     * Gets the monster guarding this door.
     *
     * @return The monster, or null if there is no monster
     */
    public Monster getMonster() {
        return monster;
    }

    /**
     * Gets the chamber on the other side of the door.
     *
     * @param currentChamber The current chamber
     * @return The chamber on the other side
     * @throws IllegalArgumentException If currentChamber is not connected to this door
     */
    public Chamber getOtherChamber(Chamber currentChamber) {
        if (currentChamber == chamber1) {
            return chamber2;
        } else if (currentChamber == chamber2) {
            return chamber1;
        } else {
            throw new IllegalArgumentException("Chamber not connected to this door");
        }
    }

    /**
     * Checks if this door can be passed through (no monster or monster is defeated).
     *
     * @return true if the door can be passed, false otherwise
     */
    public boolean canPass() {
        return monster == null || monster.isDefeated();
    }

    /**
     * Returns a string representation of this door.
     *
     * @return A string representation of this door
     */
    @Override
    public String toString() {
        String status = "Door";
        if (monster != null && !monster.isDefeated()) {
            status += " (Guarded by " + monster.toString() + ")";
        } else if (monster != null) {
            status += " (Monster defeated)";
        }
        return status;
    }
}
