// @formatter:off
////////////////////////////////////////////////////////////////////////////
//                         Kellen Siczka - 2082880                        //
//                        DePaul University - 24/25                       //
//              SE350 - Object-Oriented Software Development              //
//                ksiczka@depaul.edu | edu@kellensiczka.com               //
//         Eclipse Adoptium JRE 21.0.5.11 - Win11/WSL2 - MS VSCode        //
//           Completed by Kellen Siczka unless otherwise noted            //
//        Note: Docstrings and explanations may be generated by AI        //
////////////////////////////////////////////////////////////////////////////
//                         Week 7 - Spring Quarter                        //
//                          Lab 8 - Due 05-12-2025                        //
//               File Info: #13/17 | Move.java | Java Class               //
////////////////////////////////////////////////////////////////////////////
// @formatter:on

package dpu.se350.assignment2;

/**
 * Represents an action to move through a door to another chamber.
 */
public class Move implements Action {
    private Dungeon dungeon;
    private Door door;

    /**
     * Creates a new Move action.
     * 
     * @param dungeon The dungeon
     * @param door The door to move through
     */
    public Move(Dungeon dungeon, Door door) {
        this.dungeon = dungeon;
        this.door = door;
    }

    /**
     * Executes the move action, changing the current chamber.
     */
    @Override
    public void execute() {
        if (door.canPass()) {
            Chamber currentChamber = dungeon.getCurrentChamber();
            Chamber nextChamber = door.getOtherChamber(currentChamber);
            dungeon.setCurrentChamber(nextChamber);
            System.out.println("Moved to a new chamber");
        } else {
            System.out.println("Cannot pass through this door. It's guarded by a monster!");
        }
    }

    /**
     * Returns a string representation of this action.
     * 
     * @return A string representation of this action
     */
    @Override
    public String toString() {
        if (door.getMonster() != null && !door.getMonster().isDefeated()) {
            return "Move (Blocked by " + door.getMonster().getName() + ")";
        }
        return "Move to the next chamber";
    }
}
