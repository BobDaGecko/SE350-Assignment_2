// @formatter:off
////////////////////////////////////////////////////////////////////////////
//                         Kellen Siczka - 2082880                        //
//                        DePaul University - 24/25                       //
//              SE350 - Object-Oriented Software Development              //
//                ksiczka@depaul.edu | edu@kellensiczka.com               //
//         Eclipse Adoptium JRE 21.0.5.11 - Win11/WSL2 - MS VSCode        //
//           Completed by Kellen Siczka unless otherwise noted            //
//        Note: Docstrings and explanations may be generated by AI        //
////////////////////////////////////////////////////////////////////////////
//                         Week 7 - Spring Quarter                        //
//                          Lab 8 - Due 05-12-2025                        //
//               File Info: #4/17 | Monster.java | Java Class             //
////////////////////////////////////////////////////////////////////////////
// @formatter:on

package dpu.se350.assignment2;

/**
 * Represents a monster that can guard doors in the dungeon. Monsters have either strength or craft
 * (but not both), and health.
 */
public class Monster {
    private String name;
    private int strength;
    private int craft;
    private int health;

    /**
     * Creates a new monster with the specified attributes.
     *
     * @param name The name of the monster
     * @param strength The strength of the monster (0 if it uses craft)
     * @param craft The craft skill of the monster (0 if it uses strength)
     * @param health The initial health of the monster
     */
    public Monster(String name, int strength, int craft, int health) {
        if (strength > 0 && craft > 0) {
            throw new IllegalArgumentException("Monster cannot have both strength and craft");
        }

        this.name = name;
        this.strength = strength;
        this.craft = craft;
        this.health = health;
    }

    /**
     * Gets the name of the monster.
     *
     * @return The monster's name
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the strength of the monster.
     *
     * @return The monster's strength
     */
    public int getStrength() {
        return strength;
    }

    /**
     * Gets the craft skill of the monster.
     *
     * @return The monster's craft skill
     */
    public int getCraft() {
        return craft;
    }

    /**
     * Gets the current health of the monster.
     *
     * @return The monster's health
     */
    public int getHealth() {
        return health;
    }

    /**
     * Decreases the monster's health by the specified amount.
     *
     * @param damage The amount of damage to apply
     */
    public void takeDamage(int damage) {
        health = Math.max(0, health - damage);
    }

    /**
     * Checks if the monster is defeated (health is 0).
     *
     * @return true if the monster is defeated, false otherwise
     */
    public boolean isDefeated() {
        return health <= 0;
    }

    /**
     * Returns a string representation of this monster.
     *
     * @return A string representation of this monster
     */
    @Override
    public String toString() {
        return name + " (" + (strength > 0 ? "Strength: " + strength : "Craft: " + craft)
                + ", Health: " + health + ")";
    }
}
