// @formatter:off
////////////////////////////////////////////////////////////////////////////
//                         Kellen Siczka - 2082880                        //
//                        DePaul University - 24/25                       //
//              SE350 - Object-Oriented Software Development              //
//                ksiczka@depaul.edu | edu@kellensiczka.com               //
//         Eclipse Adoptium JRE 21.0.5.11 - Win11/WSL2 - MS VSCode        //
//           Completed by Kellen Siczka unless otherwise noted            //
//        Note: Docstrings and explanations may be generated by AI        //
////////////////////////////////////////////////////////////////////////////
//                         Week 7 - Spring Quarter                        //
//                          Lab 8 - Due 05-12-2025                        //
//             File Info: #10/17 | Chamber.java | Java Class              //
////////////////////////////////////////////////////////////////////////////
// @formatter:on

package dpu.se350.assignment2;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Represents a chamber within a dungeon. A chamber can contain items and have doors connecting to
 * other chambers.
 */
public class Chamber {
    private List<Door> doors;
    private List<Item> items;

    /**
     * Creates a new empty chamber.
     */
    public Chamber() {
        this.doors = new ArrayList<>();
        this.items = new ArrayList<>();
    }

    /**
     * Creates a new chamber containing a specific item.
     *
     * @param item The item to place in the chamber
     */
    public Chamber(Item item) {
        this();
        if (item != null) {
            items.add(item);
        }
    }

    /**
     * Gets all doors connected to this chamber.
     *
     * @return The list of doors
     */
    public List<Door> getDoors() {
        return Collections.unmodifiableList(doors);
    }

    /**
     * Gets all items in this chamber.
     *
     * @return The list of items
     */
    public List<Item> getItems() {
        return Collections.unmodifiableList(items);
    }

    /**
     * Adds a door to this chamber. This method is used internally by the Door class.
     *
     * @param door The door to add
     */
    void addDoor(Door door) {
        if (door != null && !doors.contains(door)) {
            doors.add(door);
        }
    }

    /**
     * Removes an item from this chamber.
     *
     * @param item The item to remove
     * @return true if the item was removed, false if it wasn't in the chamber
     */
    public boolean removeItem(Item item) {
        return items.remove(item);
    }

    /**
     * Adds an item to this chamber.
     *
     * @param item The item to add
     */
    public void addItem(Item item) {
        if (item != null) {
            items.add(item);
        }
    }
}
