// @formatter:off
////////////////////////////////////////////////////////////////////////////
//                         Kellen Siczka - 2082880                        //
//                        DePaul University - 24/25                       //
//              SE350 - Object-Oriented Software Development              //
//                ksiczka@depaul.edu | edu@kellensiczka.com               //
//         Eclipse Adoptium JRE 21.0.5.11 - Win11/WSL2 - MS VSCode        //
//           Completed by Kellen Siczka unless otherwise noted            //
//        Note: Docstrings and explanations may be generated by AI        //
////////////////////////////////////////////////////////////////////////////
//                         Week 7 - Spring Quarter                        //
//                          Lab 8 - Due 05-12-2025                        //
//               File Info: #2/17 | TextUI.java | Java Class              //
////////////////////////////////////////////////////////////////////////////
// @formatter:on

package dpu.se350.assignment2;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class TextUI {
    private BufferedReader reader;

    public TextUI() {
        reader = new BufferedReader(new InputStreamReader(System.in));
    }

    public void play(Dungeon d) {
        // Display welcome message
        System.out.println("\n========== WELCOME TO THE DUNGEON ADVENTURE ==========");
        System.out.println(
                "You are " + d.getPlayer().getName() + ", on a quest to escape the dungeon.");
        System.out.println(
                "Navigate through chambers, collect items, and defeat monsters to reach the exit!");
        System.out.println("======================================================\n");

        while (!d.isFinished()) {
            print(d);
            Action a = ask(d);
            a.execute();
        }

        // Display closing message
        System.out.println("\n========== GAME OVER ==========");
        if (d.getPlayer().isDefeated()) {
            System.out.println("You have been defeated! Your adventure ends here.");
        } else {
            System.out.println("You have successfully escaped the dungeon!");
        }
        System.out.println("Thank you for playing Dungeon Adventure.");
        System.out.println("==============================\n");
    }

    /** Print the current room of the dungeon. */
    private void print(Dungeon d) {
        Chamber r = d.getCurrentChamber();
        StringBuilder s = new StringBuilder();
        s.append("You are in a chamber with " + r.getDoors().size() + " doors\n");
        s.append("There are " + r.getItems().size() + " items in the chamber\n");

        // Print information about each door and its guarding monster
        List<Door> doors = r.getDoors();
        if (!doors.isEmpty()) {
            s.append("\nDoor information:\n");
            for (int i = 0; i < doors.size(); i++) {
                Door door = doors.get(i);
                s.append("\tDoor " + i + ": ");

                Monster monster = door.getMonster();
                if (monster != null) {
                    if (monster.isDefeated()) {
                        s.append("Guarded by a defeated " + monster.getClass().getSimpleName());
                    } else {
                        s.append("Guarded by a " + monster.getClass().getSimpleName());
                        s.append(" (Strength: " + monster.getStrength());
                        s.append(", Craft: " + monster.getCraft());
                        s.append(", Health: " + monster.getHealth() + ")");
                    }
                } else {
                    s.append("Unguarded");
                }
                s.append("\n");
            }
        }

        System.out.println(s.toString());
    }

    /** Asks the user for an action. */
    private Action ask(Dungeon d) {
        StringBuilder s = new StringBuilder();
        s.append("Here are your options:\n");
        List<Action> actions = d.getActions();
        for (int i = 0; i < actions.size(); i++) {
            Action a = actions.get(i);
            s.append("\t" + i + ": " + a.toString() + "\n");
        }
        System.out.println(s.toString());

        // ask for action
        try {
            int command = Integer.parseInt(reader.readLine());
            return actions.get(command);
        } catch (IOException e) {
            return new PrintError(d, e);
        }
    }
}
